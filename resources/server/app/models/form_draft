from ..extensions import db

class TransactionDetails(db.Model):
    __abstract__ = True 

    # All Forms have this
    id = db.Column(db.Integer, primary_key=True)
    form_type = db.Column(db.String, nullable=False) #Birth, Death, Marriage
    date_filed = db.Column(db.String(50))
    certification_issued_to = db.Column(db.String(255))
    verified_by = db.Column(db.String(255))
    verifier_position = db.Column(db.String(255))
    civil_registrar = db.Column(db.String(255))
    civil_registrar_position = db.Column(db.String(255))
    created_by = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    is_with_authentication = db.Column(db.Boolean, default=False)
    for_and_in_the_absence = db.Column(db.Boolean, default=False)
    absence_verified_by= db.Column(db.String(255))
    absence_verifier_position= db.Column(db.String(255))

class PaymentMixin:
    """Payment-related fields for forms with financial transactions"""
    amount_paid = db.Column(db.String(50))
    or_number = db.Column(db.String(50))
    date_paid = db.Column(db.String(50))

class AvailableRecordMixin:
    """Fields for forms with available records"""
    date_registration = db.Column(db.String(50))
    page_number = db.Column(db.String(20))
    book_number = db.Column(db.String(20))
    registry_number = db.Column(db.String(50))
    remarks = db.Column(db.Text)
    is_reconstructed= db.Column(db.Boolean, default=False)
    is_other_remarks= db.Column(db.Boolean, default=False)

# Available Records
class AvailableBirthRecord(TransactionDetails, PaymentMixin, AvailableRecordMixin):
    __tablename__ = 'available_birth_records'
    # Fields specific to Birth records
    # Child information
    name_child = db.Column(db.String(255), nullable=False)
    sex = db.Column(db.String(10), nullable=False)
    date_birth = db.Column(db.String(100), nullable=False)
    place_birth = db.Column(db.String(255), nullable=False)
    
    # Parent information
    name_mother = db.Column(db.String(255), nullable=False)
    citizenship_mother = db.Column(db.String(100))
    name_father = db.Column(db.String(255))
    citizenship_father = db.Column(db.String(100))
    
    # Parents' marriage details
    date_marriage_parents = db.Column(db.String(100))
    place_marriage_parents = db.Column(db.String(255))

class AvailableDeathRecord(TransactionDetails, PaymentMixin, AvailableRecordMixin):
    __tablename__ = 'available_death_records'
    # Deceased information
    name_deceased = db.Column(db.String(255), nullable=False)
    sex = db.Column(db.String(10))
    deceased_age = db.Column(db.String(50))
    deceased_civil_status = db.Column(db.String(50))
    deceased_citizenship = db.Column(db.String(100))
    
    # Death details
    date_of_death = db.Column(db.String(120), nullable=False)
    place_of_death = db.Column(db.String(255))
    cause_of_death = db.Column(db.String(255))

class AvailableMarriageRecord(TransactionDetails, PaymentMixin, AvailableRecordMixin):
    __tablename__ = 'available_marriage_records'
    # Groom information
    groom_name = db.Column(db.String(255), nullable=False)
    groom_date_birth = db.Column(db.Date)
    groom_age = db.Column(db.Integer)
    groom_citizenship = db.Column(db.String(100))
    groom_civil_status = db.Column(db.String(50))
    groom_mother = db.Column(db.String(255))
    groom_father = db.Column(db.String(255))
    
    # Bride information
    bride_name = db.Column(db.String(255), nullable=False)
    bride_date_birth = db.Column(db.Date)
    bride_age = db.Column(db.Integer)
    bride_citizenship = db.Column(db.String(100))
    bride_civil_status = db.Column(db.String(50))
    bride_mother = db.Column(db.String(255))
    bride_father = db.Column(db.String(255))
    
    # Marriage details
    date_marriage = db.Column(db.Date, nullable=False)
    place_marriage = db.Column(db.String(255))

# Intact/Not Available Records
class IntactRecords(TransactionDetails, PaymentMixin):
    __tablename__ = 'intact_records'
    document_owner = db.Column(db.String(255))
    event_on = db.Column(db.Date)  # Born on, Died on, Married on
    intact_event_year = db.Column(db.Integer)  # Intact: Birth, Death, Marriage

    # Column for Intact Birth
    mother_name = db.Column(db.String(255), nullable=True)
    father_name = db.Column(db.String(255), nullable=True)

# Destroyed Records
class DestroyedRecords(TransactionDetails, PaymentMixin):
    __tablename__ = 'destroyed_records'

    document_owner = db.Column(db.String(400)) # Child Name, Deceased Name, Groom and Bride name
    event_on = db.Column(db.Date) # Born on, Died on, Married on

    registered_from = db.Column(db.String(255)) # Year Registered of Event but
    from_year = db.Column(db.Integer) # This year
    to_year = db.Column(db.Integer) # And this year
    destroyed_by = db.Column(db.String(255)) # Are Destroyed by

